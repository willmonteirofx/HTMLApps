<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Organograma Interativo</title>
    <!-- Add Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body { user-select: none; }
        .box {
            min-width: 200px;
            min-height: 120px;
            border: 2px solid #000;
            border-radius: 6px;
            position: absolute;
            cursor: move;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 10px;
        }
        .box-content {
            width: 100%;
            height: 100%;
            text-align: center;
            outline: none;
        }
        .dot {
            width: 10px;
            height: 10px;
            background-color: #000;
            border-radius: 50%;
            position: absolute;
            cursor: pointer;
        }
        .top { top: -5px; left: 50%; transform: translateX(-50%); }
        .bottom { bottom: -5px; left: 50%; transform: translateX(-50%); }
        .left { left: -5px; top: 50%; transform: translateY(-50%); }
        .right { right: -5px; top: 50%; transform: translateX(-50%); }
        #addBox {
            margin: 16px;
            background-color: #000;
            color: white;
        }
    </style>
</head>
<body>
    <!-- Update the button to use Bootstrap classes and apply custom styles -->
    <button id="addBox" class="btn">Adicionar Caixa</button>

    <script>
        const state = {
            boxCount: 0,
            isDragging: false,
            selectedDot: null,
            line: null,
            lines: [],
            updateLinesRAF: null
        };

        function createBox() {
            const box = document.createElement('div');
            box.className = 'box';
            
            // Calculate the center of the screen
            const centerX = window.innerWidth / 2;
            const centerY = window.innerHeight / 2;
            
            // Position the box at the center of the screen
            box.style.left = `${centerX - 100}px`; // Subtracting half of the min-width
            box.style.top = `${centerY - 60}px`; // Subtracting half of the min-height
            
            box.innerHTML = `
                <div class="dot top"></div>
                <div class="dot bottom"></div>
                <div class="dot left"></div>
                <div class="dot right"></div>
                <div class="box-content" contenteditable="true">Edite aqui</div>
            `;
            document.body.appendChild(box);
            state.boxCount++;

            box.addEventListener('mousedown', startDragging);
            box.querySelectorAll('.dot').forEach(dot => {
                dot.addEventListener('mousedown', startLine);
            });

            // Prevent dragging when editing text
            box.querySelector('.box-content').addEventListener('mousedown', (e) => {
                e.stopPropagation();
            });
        }

        function startDragging(e) {
            if (e.target.classList.contains('dot') || e.target.classList.contains('box-content')) return;
            state.isDragging = true;
            const box = e.target.closest('.box');
            const startX = e.clientX - box.offsetLeft;
            const startY = e.clientY - box.offsetTop;

            function drag(e) {
                if (state.isDragging) {
                    box.style.left = `${e.clientX - startX}px`;
                    box.style.top = `${e.clientY - startY}px`;
                    updateLines();
                }
            }

            function stopDragging() {
                state.isDragging = false;
                document.removeEventListener('mousemove', drag);
                document.removeEventListener('mouseup', stopDragging);
            }

            document.addEventListener('mousemove', drag);
            document.addEventListener('mouseup', stopDragging);
        }

        function startLine(e) {
            e.stopPropagation();
            state.selectedDot = e.target;
            state.line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
            state.line.setAttribute('stroke', 'black');
            state.line.setAttribute('stroke-width', '2');
            const svg = document.querySelector('svg') || createSVG();
            svg.appendChild(state.line);

            function drawLine(e) {
                const rect = state.selectedDot.getBoundingClientRect();
                const startX = rect.left + rect.width / 2;
                const startY = rect.top + rect.height / 2;
                state.line.setAttribute('x1', startX);
                state.line.setAttribute('y1', startY);
                state.line.setAttribute('x2', e.clientX);
                state.line.setAttribute('y2', e.clientY);
            }

            function endLine(e) {
                const endDot = document.elementFromPoint(e.clientX, e.clientY);
                if (endDot && endDot.classList.contains('dot') && endDot !== state.selectedDot) {
                    const endRect = endDot.getBoundingClientRect();
                    state.line.setAttribute('x2', endRect.left + endRect.width / 2);
                    state.line.setAttribute('y2', endRect.top + endRect.height / 2);
                    state.lines.push({start: state.selectedDot, end: endDot, line: state.line});
                    
                    state.selectedDot.style.pointerEvents = 'none';
                    endDot.style.pointerEvents = 'none';
                } else {
                    state.line.remove();
                }
                document.removeEventListener('mousemove', drawLine);
                document.removeEventListener('mouseup', endLine);
            }

            document.addEventListener('mousemove', drawLine);
            document.addEventListener('mouseup', endLine);
        }

        function createSVG() {
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.style.position = 'absolute';
            svg.style.top = '0';
            svg.style.left = '0';
            svg.style.width = '100%';
            svg.style.height = '100%';
            svg.style.pointerEvents = 'none';
            document.body.appendChild(svg);
            return svg;
        }

        function updateLines() {
            state.lines.forEach(({start, end, line}) => {
                const startRect = start.getBoundingClientRect();
                const endRect = end.getBoundingClientRect();
                line.setAttribute('x1', startRect.left + startRect.width / 2);
                line.setAttribute('y1', startRect.top + startRect.height / 2);
                line.setAttribute('x2', endRect.left + endRect.width / 2);
                line.setAttribute('y2', endRect.top + endRect.height / 2);
            });
        }

        document.getElementById('addBox').addEventListener('click', createBox);
        createBox();
    </script>
    <!-- Add Bootstrap JS (optional, only if you need Bootstrap's JavaScript features) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>